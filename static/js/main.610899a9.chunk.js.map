{"version":3,"sources":["reportWebVitals.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","calculateWinner","squares","result","i","length","j","push","lines","a","b","c","res","aArr","findLocation","bArr","cArr","winner","winnerIdxs","loc","Square","props","hover","console","log","document","getElementsByClassName","classList","remove","className","onClick","value","WinnerSquare","Board","array","this","JSON","stringify","k","temp","doesContain","handleClick","map","item","renderSquare","id","React","Component","Game","state","history","Array","fill","x","stepNumber","location","reverse","xIsNext","slice","current","squaresCopy","idx","winnerObj","setState","concat","currentLocation","squaresOne","squaresTwo","l","differenceBetween","status","isTied","isGameTied","moves","desc","jumpTo","type","checked","sortList","reset","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.610899a9.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\n\nconst calculateWinner = (squares) => {\n  const result = [];\n\n  for (let i = 0; i < squares.length; i++) {\n    for (let j = 0; j < squares[i].length; j++) {\n      result.push(squares[i][j])\n    }\n  }\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (result[a] && result[a] === result[b] && result[a] === result[c]) {\n      const res = []\n      const aArr = findLocation(a)\n      res.push(aArr);\n      const bArr = findLocation(b)\n      res.push(bArr);\n      const cArr = findLocation(c)\n      res.push(cArr);\n      return {\n        winner: result[a],\n        winnerIdxs: res,\n      };\n    }\n  }\n  return null;\n}\n\nconst isGameTied = (squares) => {\n  for (let i = 0; i < squares.length; i++) {\n    for (let j = 0; j < squares[i].length; j++) {\n      if (squares[i][j] === null) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nconst findLocation = (loc) => {\n  if (loc >= 0 && loc <= 2) {\n    return [0, loc - 0]\n  } else if (loc >= 3 && loc <= 5) {\n    return [1, loc - 3]\n  } else {\n    return [2, loc - 6]\n  }\n}\n\nconst differenceBetween = (i, j, history) => {\n  const squaresOne = history[i].squares;\n  const squaresTwo = history[j].squares;\n  for (let k = 0; k < squaresOne.length; k++) {\n    for (let l = 0; l < squaresTwo.length; l++) {\n      if (squaresOne[k][l] !== squaresTwo[k][l]) {\n        return [k, l];\n      }\n    }\n  }\n  return [0, 0]\n}\n\nconst doesContain = (i, j, array) => {\n  for (let k = 0; k < array.length; k++) {\n    const temp = array[k];\n    if (temp[0] === i && temp[1] === j) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction removeClass() {\n  var elements = document.getElementsByClassName('square');\n  var element = elements[0];\n\n  element.classList.remove('hover');\n}\n\nconst Square = (props) => {\n  const hover = props.hover;\n  console.log(\"hover\",hover)\n\n  if (!hover) {\n    removeClass();\n  }\n\n  return (\n    \n    <button className={\"square hover\"} onClick={props.onClick}>{props.value}</button>\n  );\n}\n\nconst WinnerSquare = (props) => {\n  return (\n    <button className=\"square winner\" onClick={props.onClick}>{props.value}</button>\n  );\n}\n\nclass Board extends React.Component {\n\n  renderSquare(i, j) {\n    const array = this.props.winnerIdxs;\n\n    let hover = true;\n\n    if (JSON.stringify(array) !== JSON.stringify([])) {\n      hover = false;\n    }\n\n    const winnerSquare = doesContain(i, j, array);\n\n    if (winnerSquare) {\n      return <WinnerSquare value={this.props.squares[i][j]} onClick={() => this.props.handleClick(i, j)} />\n    }\n    return <Square value={this.props.squares[i][j]} onClick={() => this.props.handleClick(i, j)} hover={hover} />\n  }\n\n  render() {\n\n    const res = []\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        res.push([i, j]);\n      }\n    }\n\n    let result = res.map((item, i) => {\n      return this.renderSquare(item[0], item[1]);\n    })\n\n    return (\n      <div id=\"grid\">{result}</div>\n    )\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(3).fill(0).map(x => Array(3).fill(null)),\n      }],\n      stepNumber: 0,\n      location: [0, 0],\n      reverse: false,\n      xIsNext: true,\n    }\n  }\n\n  handleClick(i, j) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squaresCopy = Array(3).fill(0).map((x, idx) => {\n      return current.squares[idx].slice()\n    })\n\n    const winnerObj = calculateWinner(squaresCopy);\n\n    let winner;\n    if (winnerObj !== null) {\n      winner = winnerObj.winner;\n    } else {\n      winner = null;\n    }\n\n    if (winner || squaresCopy[i][j]) {\n      return;\n    }\n    squaresCopy[i][j] = this.state.xIsNext ? 'X' : 'O';\n    // const currentLocation = findLocation(i);\n    this.setState({\n      history: history.concat([{\n        squares: squaresCopy,\n      }]),\n      stepNumber: this.state.stepNumber + 1,\n      location: [i, j],\n      xIsNext: !this.state.xIsNext,\n    })\n  }\n\n  reset() {\n    this.setState({\n      history: [{\n        squares: Array(3).fill(0).map(x => Array(3).fill(null)),\n      }],\n      stepNumber: 0,\n      location: [0, 0],\n      reverse: false,\n      xIsNext: true,\n    })\n  }\n\n  jumpTo(i) {\n    const history = this.state.history.slice();\n    if (i === 0) {\n      const currentLocation = [0, 0]\n      this.setState({\n        stepNumber: i,\n        location: currentLocation,\n        xIsNext: i % 2 === 0 ? true : false,\n      })\n    } else {\n      const currentLocation = differenceBetween(i, i - 1, history);\n      // const currentLocation = findLocation(index);\n      this.setState({\n        stepNumber: i,\n        location: currentLocation,\n        xIsNext: i % 2 === 0 ? true : false,\n      })\n    }\n  }\n\n  sortList() {\n    this.setState({\n      reverse: !this.state.reverse,\n    })\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winnerObj = calculateWinner(current.squares);\n\n    let winner;\n    if (winnerObj !== null) {\n      winner = winnerObj.winner;\n    } else {\n      winner = null;\n    }\n\n    const isTied = isGameTied(current.squares);\n\n    let status;\n    let winnerIdxs = [];\n    if (winner) {\n      status = \"Winner \" + winner;\n      winnerIdxs = winnerObj.winnerIdxs;\n      console.log(winnerIdxs);\n    } else if (isTied) {\n      status = \"Game Tied\";\n    }\n    else {\n      status = \"Next move: \" + (this.state.xIsNext ? \"X\" : \"O\");\n    }\n\n    let moves = history.map((item, i) => {\n\n      const reverse = this.state.reverse;\n\n      if (reverse) {\n        i = history.length - i - 1;\n      }\n\n      const desc = i === 0 ? \"Go to start\" : \"Go to step \" + i;\n\n      return <li key={i}>\n        <button className=\"step-btn\" onClick={() => this.jumpTo(i)}>{desc}</button>\n\n      </li>\n    });\n\n    const location = this.state.location;\n\n    return (\n      <div id=\"main-container\">\n        <div id=\"content\">\n          <div id=\"container1\">\n            <div id=\"header\">\n              <div>\n                <div className=\"h1\">{status}</div>\n              </div>\n            </div>\n            <div id=\"location\">{`[${location[0]}] [${location[1]}]`}\n            </div>\n            <div id=\"board\">\n              <Board\n                winnerIdxs={winnerIdxs}\n                squares={current.squares}\n                handleClick={(i, j) => this.handleClick(i, j)}\n              />\n            </div>\n          </div>\n          <div id=\"container2\">\n            <div className=\"side-h1\">Moves</div>\n            <div id=\"sort-area\">\n              <label className=\"switch\">\n                <input type=\"checkbox\" checked={this.state.reverse}></input>\n                <span onClick={() => this.sortList(moves)} className=\"slider\"></span>\n              </label>\n            </div>\n            <div id=\"side-bar\">\n              <ol>{moves}</ol>\n            </div>\n          </div>\n        </div>\n        <div className=\"footer\">\n          <button className=\"btn\" onClick={() => this.reset()} >Reset</button>\n        </div>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}