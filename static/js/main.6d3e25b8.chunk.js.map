{"version":3,"sources":["reportWebVitals.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","calculateWinner","squares","console","log","lines","i","length","a","b","c","Square","props","className","onClick","value","Board","this","handleClick","id","renderSquare","React","Component","Game","state","Array","fill","xIsNext","squaresCopy","setState","status","winner","isTied","isGameTied","reset","ReactDOM","render","document","getElementById"],"mappings":"wNAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,OCDRQ,EAAkB,SAACC,GACvBC,QAAQC,IAAIF,GAYZ,IAXA,IAAMG,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGAC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CACrC,kBAAkBD,EAAMC,GAAxB,GAAOE,EAAP,KAAUC,EAAV,KAAaC,EAAb,KACA,GAAIR,EAAQM,IAAMN,EAAQM,KAAON,EAAQO,IAAMP,EAAQM,KAAON,EAAQQ,GACpE,OAAOR,EAAQM,GAGnB,OAAO,MAYHG,EAAS,SAACC,GACd,OACE,wBAAQC,UAAU,SAASC,QAASF,EAAME,QAA1C,SAAoDF,EAAMG,SAIxDC,E,kDACJ,WAAYJ,GAAQ,uCACZA,G,gDAIR,SAAaN,GAAI,IAAD,OACd,OAAO,cAAC,EAAD,CAAQS,MAAOE,KAAKL,MAAMV,QAAQI,GAAIQ,QAAS,kBAAM,EAAKF,MAAMM,YAAYZ,Q,oBAGrF,WAGE,OACE,sBAAKa,GAAG,OAAR,UAMKF,KAAKG,aAAa,GAClBH,KAAKG,aAAa,GAClBH,KAAKG,aAAa,GAGlBH,KAAKG,aAAa,GAClBH,KAAKG,aAAa,GAClBH,KAAKG,aAAa,GAGlBH,KAAKG,aAAa,GAClBH,KAAKG,aAAa,GAClBH,KAAKG,aAAa,U,GAhCTC,IAAMC,WAwCpBC,E,kDACJ,WAAYX,GAAQ,IAAD,8BACjB,cAAMA,IACDY,MAAQ,CACXtB,QAASuB,MAAM,GAAGC,KAAK,MACvBC,SAAS,GAJM,E,+CAQnB,SAAYrB,GACV,IAAMsB,EAAcX,KAAKO,MAAMtB,QAC3BD,EAAgB2B,IAAgBA,EAAYtB,KAGhDsB,EAAYtB,GAAKW,KAAKO,MAAMG,QAAU,IAAM,IAC5CV,KAAKY,SAAS,CACZ3B,QAAS0B,EACTD,SAAUV,KAAKO,MAAMG,a,mBAIzB,WACEV,KAAKY,SAAS,CACZ3B,QAASuB,MAAM,GAAGC,KAAK,MACvBC,SAAS,M,oBAIb,WAAU,IAIJG,EAJG,OACDC,EAAS9B,EAAgBgB,KAAKO,MAAMtB,SACpC8B,EArFS,SAAC9B,GAClB,IAAK,IAAII,EAAI,EAAGA,EAAIJ,EAAQK,OAAQD,IAClC,GAAmB,OAAfJ,EAAQI,GACV,OAAO,EAGX,OAAO,EA+EU2B,CAAWhB,KAAKO,MAAMtB,SAYrC,OARE4B,EADEC,EACO,UAAYA,EACZC,EACA,YAGA,eAAiBf,KAAKO,MAAMG,QAAU,IAAM,KAIrD,gCACE,8BACE,qBAAKd,UAAU,KAAf,SAAqBiB,MAGrB,qBAAKX,GAAG,QAAR,SACA,cAAC,EAAD,CACEjB,QAASe,KAAKO,MAAMtB,QACpBgB,YAAa,SAACZ,GAAD,OAAO,EAAKY,YAAYZ,QAIzC,qBAAKO,UAAU,SAAf,SACE,wBAAQA,UAAU,MAAMC,QAAS,kBAAM,EAAKoB,SAA5C,4B,GAxDSb,IAAMC,WA+DzBa,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1B9C,M","file":"static/js/main.6d3e25b8.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\n\nconst calculateWinner = (squares) => {\n  console.log(squares)\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\nconst isGameTied = (squares) => {\n  for (let i = 0; i < squares.length; i++) {\n    if (squares[i] === null) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconst Square = (props) => {\n  return (\n    <button className=\"square\" onClick={props.onClick}>{props.value}</button>\n  );\n}\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n\n  renderSquare(i) {\n    return <Square value={this.props.squares[i]} onClick={() => this.props.handleClick(i)} />\n  }\n\n  render() {\n\n\n    return (\n      <div id=\"grid\">\n        {/* <div id=\"header\">\n          <h1 className=\"h1\">{status}</h1>\n        </div> */}\n        {/* <div> */}\n        {/* <div> */}\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        {/* </div> */}\n        {/* <div> */}\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        {/* </div> */}\n        {/* <div> */}\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        {/* </div> */}\n        {/* </div> */}\n      </div>\n    )\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(null),\n      xIsNext: true,\n    }\n  }\n\n  handleClick(i) {\n    const squaresCopy = this.state.squares;\n    if (calculateWinner(squaresCopy) || squaresCopy[i]) {\n      return;\n    }\n    squaresCopy[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      squares: squaresCopy,\n      xIsNext: !this.state.xIsNext,\n    })\n  }\n\n  reset() {\n    this.setState({\n      squares: Array(9).fill(null),\n      xIsNext: true,\n    })\n  }\n\n  render() {\n    const winner = calculateWinner(this.state.squares);\n    const isTied = isGameTied(this.state.squares);\n\n    let status;\n    if (winner) {\n      status = \"Winner \" + winner;\n    } else if (isTied) {\n      status = \"Game Tied\";\n    }\n    else {\n      status = \"Next move: \" + (this.state.xIsNext ? \"X\" : \"O\");\n    }\n\n    return (\n      <div>\n        <div>\n          <div className=\"h1\">{status}</div>\n        </div>\n        {/* <div id=\"container\"> */}\n          <div id=\"board\">\n          <Board\n            squares={this.state.squares}\n            handleClick={(i) => this.handleClick(i)}\n          />\n          </div>\n        {/* </div> */}\n        <div className=\"footer\">\n          <button className=\"btn\" onClick={() => this.reset()} >Reset</button>\n        </div>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}